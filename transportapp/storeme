import 'package:flutter/material.dart';
import 'package:transportapp/constants/routes.dart';
import 'package:transportapp/map.dart';
import 'package:transportapp/views/login_view.dart';
import 'package:transportapp/views/register_view.dart';

void main() {
  runApp( MaterialApp(
      home: RegisterView(),
      routes: {
        registerRoute: (coutext) => RegisterView(),
        loginRoute: (context) => const LoginView(),
        mapRoute: (context) => const MainMap(),
      }
    ),
    );
}


// futureBuilder i guess

 FutureBuilder(
          future: futureVehicle,
          builder:  (context, snapshot) {
            if (snapshot.hasData) {
              devtools.log(snapshot.data.toString());
              return Text(snapshot.data.toString());
            } else if (snapshot.hasError) {
              devtools.log("an error has occured");
              devtools.log(snapshot.error.toString());
              return Text('${snapshot.error}');
            }

            return const CircularProgressIndicator();
          },)

// calling an api, home.dart

import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:transportapp/models/users_model.dart';
import 'package:http/http.dart' as http;

class HomeScreen extends StatefulWidget {
  const HomeScreen({super.key});

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  late Future<User> futureUser;

  @override
  void initState() {
    super.initState();
    futureUser = fetchUser();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Restful API call'),
      ),
      body: Center (
        child: FutureBuilder<User>(

          future: futureUser,
          builder: (context, snapshot) {
            if (snapshot.hasData) {
              return Text(snapshot.data!.email);
            } else if (snapshot.hasError) {
              return Text('${snapshot.error}');
            }

            return const CircularProgressIndicator();
          },
        ),
      ),
    );
  }
}

Future<User> fetchUser() async {
  const uri = 'http://127.0.0.1:8000/passengers/2/';
  final response = await http.get(Uri.parse(uri));

  if (response.statusCode == 200) {
    return User.fromDatabaseJson(jsonDecode(response.body));
  }
  else {
    throw Exception('Failed to load users');
  }

}


Flutter main page:

import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:transportapp/authenticaton/bloc/authentication_bloc.dart';
import 'package:transportapp/components/loading_indicator.dart';
import 'package:transportapp/components/splash_page.dart';
import 'package:transportapp/constants/routes.dart';
import 'package:transportapp/login/login_page.dart';
import 'package:transportapp/login/login_view.dart';
import 'package:transportapp/map.dart';
import 'package:transportapp/repository/user_repository.dart';
import 'package:transportapp/views/home_view.dart';
import 'dart:developer' as devtools;

import 'package:transportapp/views/register_view.dart';

void main() {
  final userRepository = UserRepository();

  runApp(
      BlocProvider<AuthenticationBloc>(
        create: (context) {
          return AuthenticationBloc(
              userRepository: userRepository
          )..add(AppStarted());
        },
        child: AuthState(userRepository: userRepository),
      )
  );
}

class AuthState extends StatelessWidget {

final UserRepository userRepository;

const AuthState({super.key, required this.userRepository});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(
              seedColor: const Color.fromRGBO(244, 224, 185, 1.0)),
      ),
      routes: {
        registerRoute: (coutext) => RegisterView(),
        loginRoute: (context) => const LoginView(),
        mapRoute: (context) => const MainMap(),
        homeRoute: (context) => const HomeView(),
      },
      home: BlocBuilder<AuthenticationBloc, AuthenticationState>(
        builder: (context, state) {
          if (state is AuthenticationUnintialized) {
            devtools.log("not initialised authentication");
            return const SplashPage();
          }
          if (state is AuthenticationAuthenticated) {
            devtools.log("has been authenticated");
            return  const HomeView();
          }
          if (state is AuthenticationUnauthenticated) {
            devtools.log("not authenticated");
            return LoginPage(userRepository: userRepository,);
          }
          return const LoadingIndicator();
        },
      ),
    );
  }
}

TextField(
                         controller: startController,
                         focusNode: startFocusNode,
                         decoration: const InputDecoration(
                          border: InputBorder.none,
                          prefixIcon: Icon(
                            Icons.person_pin_circle,
                            size: 30,),
                           filled: true,
                           fillColor: Color.fromRGBO(197,197,197, 0.4) ,
                           hintText: 'Start:'),
                         ),






